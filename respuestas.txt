18. ¿Cuál es el resultado de la siguiente operación?

  2.0.0-p247 :001 > puts "Hello world"
  ???
  => ???
  2.0.0-p247 :002 >

  La siguiente operación muestra por pantalla el mensaje definido entre comillas
(Hello world) y retorna nil.

21. ¿Cuáles son las diferencias entre la ejecución del programa "Hola Mundo" con el intérprete de Ruby
 (ruby helloWorld.rb) y el intérprete interactivo del ejercicio anterior?

  Se diferencian principalmente en que el intérprete de Ruby no indica los valores
de retorno de las expresiones. En este caso, no muestra que la expresión utilizada devuelve nill.

26. ¿Cuál es el resultado de cada una de las siguientes operaciones?

  [1] pry(main)> puts x
  ???
  => ???
  [2] pry(main)> def hello
  [2] pry(main)* puts "Hello world"
  [2] pry(main)* end
  => ???
  [3] pry(main)> hello
  ???
  => ???
  [4] pry(main)> byebye
  ???
  => ???
  [5] pry(main)> x = "changed"
  => ???
  [6] pry(main)> exit
  program resumes here. Value of x is: ???
  
  [1] Muestra 10 y devuelve nil.
  [2] Devuelve :hello.
  [3] Muestra el mensaje "Hello world" y devuelve nil.
  [4] Muestra el mensaje "bye bye world!!!" y devuelve nil.
  [5] Devuelve "changed".
  [6] Value of x is: changed.

27. ¿Cuáles son las diferencias entre la ejecución del programa "Hola Mundo" con el intérprete
interactivo y con PRY?

  La diferencia entre usar PRY y el intérprete interactivo radica en que PRY no devuelve el valor de retorno
de la expresión utilizada mientras que el intérprete sí lo devuelve.

34. ¿Qué diferencia hay entre "\t\n" y '\t\n'?

  Se diferencian en que usar "\t\n" equivale a un tabulador y un salto de línea, mientras que '\t\n' muestra
literalmente dichos caracteres.

35. ¿Cómo funciona %q? ¿Qué es %q{hello world\n}? ¿Qué es %q{’a’ ’b’ ’c’}?

  %q se comporta como las comillas simples de forma que usar %q{hello world\n} y %q{'a' 'b' 'c'}
muestra las cadenas literales sin realizar ninguna interpolación

36. ¿Cómo funciona %Q? ¿Qué es %Q{hello world\n}? ¿Qué es %Q{"a" "b" "c"}?
  
  %Q se comporta como las comillas dobles realizando interpolación en la cadena entre llaves. Así
por ejemplo, el primero da la cadena hello world seguida de un salto de línea.

37. ¿Qué queda en c?

irb(main):001:0> a = 4
=> 4
irb(main):002:0> b =2
=> 2
irb(main):003:0> c = <<HERE
irb(main):004:0" --#{a}--
irb(main):005:0" --#{b}
irb(main):006:0" HERE

  En c queda --4--\n--2\n interpolando los saltos de línea.

38. ¿Que queda en c?

irb(main):001:0> a = 4
=> 4
irb(main):002:0> b =2
=> 2
irb(main):008:0> c = <<’HERE’
irb(main):009:0’ --#{a}--
irb(main):010:0’ --#{b}--
irb(main):011:0’ HERE

  En c queda --#{a}--\n--#{b}1\n sin interpolar los saltos de línea.

39. s= "hello". ¿Cuál es el valor de las siguientes expresiones?

s[0,2] --> => "he" 
s[-1,1] -->  => "o" 
s[0,10] -->  => "hello"

40. ¿Qué queda en g?

>> g = "hello"
=> "hello"
>> g << " world"

-->  => "hello world" (Se concatena " world" a la cadena en g)

41. ¿Qué queda en e?

>> e = ’.’*3

--> "..." (Realiza la concatenación tres veces)

42. ¿Cuál es el resultado?

>> a = 1
=> 1
>> "#{a=a+1} "*3

-->  => "2 2 2 " (Primero interpola la expresión entre llaves la cual devuelve 2 seguido de un espacio
  y posteriormente la concatena tres veces)

43. ¿Qué es esto? %w[this is a test]

-->  => ["this", "is", "a", "test"] (Devuelve un array con los valores dentro de los corchetes)

44. ¿Qué es esto? %w[\t \n]

-->  => ["\\t\\n"] (Interpreta el contenido sin interpolarlo)

45. ¿Qué es esto? %W[\t \n]

--> => ["\t", "\n"] (Interpreta el contenido interpolándolo como si usáramos comillas dobles)

46. ¿Qué contiene nils? nils = Array.new(3)

--> => [nil, nil, nil] (Crea un array de tres posiciones vacías)

47. ¿Qué contiene zeros? zeros = Array.new(3, 0)

-->  => [0, 0, 0] (Crea un array de tres ceros)

48. ¿Qué queda en b?

>> x = [[1,2],[3,4]]
=> [[1, 2], [3, 4]]
>> b = Array.new(x)

-->  => [[1, 2], [3, 4]] 

49. ¿Qué queda en c?

>> c = Array.new(3) { |i| 2*i } 

-->  => [0, 2, 4]

50. ¿Cuál es el resultado de cada una de estas operaciones?

>> a = (’a’..’e’).to_a
=> ["a", "b", "c", "d", "e"]
>> a[1,1] -->  => ["b"]
=>
>> a[-2,2] -->  => ["d", "e"]
=>
>> a[0..2] -->  => ["a", "b", "c"] 
=>
>> a[0...1] --> => ["a"] 
=>
>> a[-2..-1] -->  => ["d", "e"] 

51. ¿Cuál es el resultado de cada una de estas operaciones?
>> a
=> ["a", "b", "c", "d", "e"]
>> a[0,2] = %w{A B}
=> ["A", "B"]
>> a
=>   ["A", "B", "c", "d", "e"] 
>> a[2..5] = %w{C D E}
=> ["C", "D", "E"]
>> a
=> ["A", "B", "C", "D", "E"]
>> a[0,0] = [1,2,3]
=> [1, 2, 3]
>> a
=> [1, 2, 3, "A", "B", "C", "D", "E"]
>> a[0,2] = []
=> []
>> a
=> [3, "A", "B", "C", "D", "E"]
>> a[-1,1] = [ ’Z’ ]
=> ["Z"]
>> a
=> [3, "A", "B", "C", "D", "Z"]
>> a[-2,2] = nil
=> nil
>> a
=> [3, "A", "B", "C", nill] 

52. ¿Cuál es el resultado de cada una de estas operaciones?

>> a = (1...4).to_a
=>  => [1, 2, 3]
>> a = a + [4, 5]
=> [1, 2, 3, 4, 5] 
>> a += [[6, 7, 8]]
=> => [1, 2, 3, 4, 5, [6, 7, 8]] 
>> a = a + 9 

53. ¿Cuál es el resultado de cada una de estas operaciones?

>> x = %w{a b c b a}
=> ["a", "b", "c", "b", "a"] 
>> x = x - %w{b c d}
=> ["a", "a"] 

54. ¿Cuál es el resultado de cada una de estas operaciones?

>> z = [0]*8
=> [0, 0, 0, 0, 0, 0, 0, 0]  

55. ¿Cual es el resultado de cada una de estas operaciones?

>> a = []
=> []
>> a << 1
=> [1] 
>> a << 2 << 3
=> [1, 2, 3] 
>> a << [4, 5, 6]
=> [1, 2, 3, [4, 5, 6]]
>> a.concat [7, 8]
=> [1, 2, 3, [4, 5, 6], 7, 8]

56. ¿Cuál es el resultado de cada una de estas operaciones?

>> a = [1, 1, 2, 2, 3, 3, 4]
=> [1, 1, 2, 2, 3, 3, 4]
>> b = [5, 5, 4, 4, 3, 3, 2]
=> [5, 5, 4, 4, 3, 3, 2]
>> c = a | b
=> [1, 2, 3, 4, 5] 
>> d = b | a
=> [5, 4, 3, 2, 1] 
>> e = a & b
=> [2, 3, 4] 
>> f = b & a
=> [4, 3, 2]   

57. ¿Qué resultados dan las siguientes operaciones?

>> a = 1..10
=> 1..10
>> a.class
=> Range
>> a.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
>> b = 1...10
=> 1....10
>> b.to_a
=> [5, 5, 4, 4, 3, 3, 2] 
>> b.include? 10
=> false 
>> b.include? 8
=> false 
>> b.step(2) {|x| print "#{x} " }
>> 1..3.to_a

Devuelve error ya que el método to_a no está definido en la clase Fixnum.

58. ¿Qué resultados dan las siguientes operaciones?

>> r = 0...100
=> 0....100
>> r.member? 50
=> true
>> r.include? 99.9
=> true
>> r.member? 99.9
=> true

59. ¿Qué resultados dan las siguientes operaciones?

>> true.class
=> TrueClass
>> false.class
=> FalseClass
>> puts "hello" if 0
=> hello
>> puts "hello" if nil
=>  nil
>> puts "hello" if ""
=> hello 

60. ¿Qué resultados dan las siguientes operaciones?

>> x = :sym
=> :sym
>> x.class
=> Symbol
>> x == ’sym’
=> false
>> x == :sym
=> true
>> z = :’a long symbol’
=> :"a long symbol"
>> z.class
=> Symbol
>> x == ’sym’.to_sym
=> true
>> x.to_s == ’sym’
=> true

61. ¿Qué resultados se dan?
>> s = "Ruby"
=> "Ruby"
>> t = s
=> "Ruby"
>> t[-1] = ""
=> ""
>> print s
Rub => nil 
>> t = "Java"
=> "Java"
>> print s, t
RubJava => nil

62. ¿Cuál es el resultado?

>> "%d %s" % [3, "rubies"]
=> "3 rubies"

63. ¿Cuáles son los resultados?

>> x, y = 4, 5
=> [4, 5] 
>> z = x > y ? x : y
=> 5
>> x,y,z = [1,2,3]
=> [1, 2, 3] 

64. ¿Qué resultados dan las siguientes operaciones?

>> x = { :a => 1, :b => 2 }
=> {:b=>2, :a=>1}
>> x.keys
=> [:a, :b] 
>> x.values
=> [1, 2]
>> x[:c] = 3
=> 3
>> x
=> {:a=>1, :b=>2, :c=>3} 
>> x.delete(’a’)
=> nil
>> x
=> {:a=>1, :b=>2, :c=>3} 
>> x.delete(:a)
=> 1
>> x
=> {:b=>2, :c=>3}
>> x = { :a => 1, :b => 2, :c => 4 }
=> {:b=>2, :c=>4, :a=>1}
>> x.delete_if { |k,v| v % 2 == 0 }
=> {:a=>1}
>> x
=> {:a=>1}

65. ¿Qué hace la siguiente sentencia? counts = Hash.new(0) ¿Qué diferencia hay con la asignacion 
counts = {}?

  La sentencia counts = Hash.new(0) crea un array vacío. Se diferencia en que al usar el método
new podemos poner los valores por defecto del nuevo array.

66. ¿Qué retorna esta expresion? ’hello world, hello LPP’.scan /\w+/

--> ["hello", "world", "hello", "LPP"] (Crea un array)
